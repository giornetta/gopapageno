package gopapageno

import (
	"context"
	"fmt"
)

type COPParser struct {
	g *Grammar

	concurrency       int
	reductionStrategy ReductionStrategy

	// Pools
	pools struct {
		stacks       []*Pool[stack[*Token]]
		nonterminals []*Pool[Token]
		stateStacks  []*Pool[stack[CyclicAutomataState]]

		// These are only used when reducing using a single sweep.
		sweepInput      *Pool[stack[Token]]
		sweepStack      *Pool[stack[*Token]]
		sweepStateStack *Pool[stack[CyclicAutomataState]]
	}

	workers []*coppWorker
	results []*COPPStack
}

func NewCOPParser(
	g *Grammar,
	src []byte, concurrency int, avgTokenLength int, strategy ReductionStrategy) *COPParser {
	p := &COPParser{
		g:                 g,
		concurrency:       concurrency,
		reductionStrategy: strategy,
		workers:           make([]*coppWorker, concurrency),
		results:           make([]*COPPStack, concurrency),
	}

	srcLen := len(src)
	stackPoolBaseSize := stacksCount[*Token](src, p.concurrency, avgTokenLength)
	ntPoolBaseSize := srcLen / avgTokenLength / p.concurrency

	// Initialize memory pools for stacks.
	p.pools.stacks = make([]*Pool[stack[*Token]], p.concurrency)

	// Initialize pools to hold pointers to tokens generated by the reduction steps.
	p.pools.nonterminals = make([]*Pool[Token], p.concurrency)

	// Initialize memory pools for cyclic states.
	p.pools.stateStacks = make([]*Pool[stack[CyclicAutomataState]], p.concurrency)

	for thread := 0; thread < p.concurrency; thread++ {
		stackPoolMultiplier := .25
		if strategy == ReductionParallel {
			//stackPoolMultiplier = p.concurrency - thread
		}

		p.pools.stacks[thread] = NewPool(int(float64(stackPoolBaseSize)*stackPoolMultiplier), WithConstructor(newStack[*Token]))
		p.pools.nonterminals[thread] = NewPool[Token](int(float64(ntPoolBaseSize) * stackPoolMultiplier))
		p.pools.stateStacks[thread] = NewPool(int(float64(stackPoolBaseSize)*stackPoolMultiplier), WithConstructor(newStack[CyclicAutomataState]))
	}

	// If reduction is sweep or mixed, we create another stack and input for the final pass.
	// TODO: Is this strictly necessary?
	if strategy == ReductionSweep || strategy == ReductionMixed {
		inputPoolBaseSize := stacksCount[Token](src, p.concurrency, avgTokenLength)

		p.pools.sweepInput = NewPool(inputPoolBaseSize, WithConstructor(newStack[Token]))
		p.pools.sweepStack = NewPool(stackPoolBaseSize, WithConstructor(newStack[*Token]))
		p.pools.sweepStateStack = NewPool(stackPoolBaseSize, WithConstructor(newStack[CyclicAutomataState]))
	}

	for thread := 0; thread < concurrency; thread++ {
		p.workers[thread] = &coppWorker{
			parser: p,
			id:     thread,
			ntPool: p.pools.nonterminals[thread],
		}
	}

	return p
}

func (p *COPParser) Parse(ctx context.Context, tokensLists []*LOS[Token]) (*Token, error) {
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	p.concurrency = len(tokensLists)

	resultCh := make(chan parseResult[COPPStack])
	errCh := make(chan error, 1)

	// First parallel pass of the algorithm.
	for thread := 0; thread < p.concurrency; thread++ {
		var nextToken *Token

		// If the thread is not the last, also take the first token of the next stack for lookahead.
		if thread < p.concurrency-1 {
			nextInputListIter := tokensLists[thread+1].HeadIterator()
			nextToken = nextInputListIter.Next()
		}

		// TODO: Initialize right stack
		s := NewCOPPStack(p.pools.stacks[thread], p.pools.stateStacks[thread])
		go p.workers[thread].parse(ctx, s, tokensLists[thread], nextToken, false, resultCh, errCh)
	}

	if err := collectResults[COPPStack](p.results, resultCh, errCh, p.concurrency); err != nil {
		return nil, err
	}

	//If the number of threads is greater than one, results must be combined and work should continue.
	reductionPasses := 0

	// Reduction phase
	for p.concurrency--; p.concurrency >= 1; p.concurrency-- {
		if p.reductionStrategy == ReductionSweep || (p.reductionStrategy == ReductionMixed && reductionPasses >= 2) {

			// Nullifies the previous p.concurrency--
			p.concurrency++

			// Create the final input by joining together the stacks from the previous step.
			stack := p.results[0].Combine()
			input := p.CombineSweepLOS(p.pools.sweepInput, p.results[1:])

			// Sets correct concurrency level for final sweep.
			p.concurrency = 1

			go p.workers[0].parse(ctx, stack, input, nil, true, resultCh, errCh)

			if err := collectResults[COPPStack](p.results, resultCh, errCh, 1); err != nil {
				cancel()
				return nil, err
			}
		} else {
			for i := 0; i < p.concurrency; i++ {
				stackLeft := p.results[i]
				stackRight := p.results[i+1]

				stack := stackLeft.Combine()

				// TODO: I should find a way to make this work without creating a new LOS for the inputs.
				// Unfortunately the new stack depends on the content of tokensLists[i] since its elements are stored there.
				// We can't erase the old input easily to reuse its storage.
				// TODO: Maybe allocate 2 * c LOS so that we can alternate?
				input := stackRight.CombineLOS(tokensLists[i].pool)

				go p.workers[i].parse(ctx, stack, input, nil, true, resultCh, errCh)
			}

			if err := collectResults[COPPStack](p.results, resultCh, errCh, p.concurrency); err != nil {
				cancel()
				return nil, err
			}

			reductionPasses++
		}
	}

	root, err := p.results[0].LastNonterminal()
	if err != nil {
		return nil, err
	}

	return root, nil
}

func (p *COPParser) CombineSweepLOS(pool *Pool[stack[Token]], stacks []*COPPStack) *LOS[Token] {
	input := NewLOS[Token](pool)

	tokenSet := make(map[*Token]struct{}, stacks[0].Length())
	for i := 0; i < p.concurrency-1; i++ {
		it := stacks[i].Iterator()

		//Ignore the first token.
		t, st := it.Next()
		tokenSet[t] = struct{}{}
		for _, t := range stacks[i].StateTokenStack.Slice(st.CurrentIndex, st.CurrentLen) {
			tokenSet[t] = struct{}{}
		}

		for t, st := it.Next(); t != nil; t, st = it.Next() {
			if t.Precedence == PrecEquals {
				if !it.IsLast() {
					continue
				}

				for _, stateToken := range stacks[i].Previous() {
					if _, ok := tokenSet[stateToken]; !ok {
						stateToken.Precedence = PrecEmpty
						input.Push(*stateToken)

						tokenSet[stateToken] = struct{}{}
					}
				}

				for _, stateToken := range stacks[i].Current() {
					if _, ok := tokenSet[stateToken]; !ok {
						stateToken.Precedence = PrecEmpty
						input.Push(*stateToken)

						tokenSet[stateToken] = struct{}{}
					}
				}

				continue
			}

			for _, stateToken := range stacks[i].StateTokenStack.Slice(st.CurrentIndex, st.CurrentLen) {
				if _, ok := tokenSet[stateToken]; !ok {
					stateToken.Precedence = PrecEmpty
					input.Push(*stateToken)

					tokenSet[stateToken] = struct{}{}
				}
			}

			if _, ok := tokenSet[t]; !ok {
				t.Precedence = PrecEmpty
				input.Push(*t)

				tokenSet[t] = struct{}{}
			}
		}
	}

	return input
}

type coppWorker struct {
	parser *COPParser
	id     int

	ntPool *Pool[Token]
	// producedTokens maps the rightmost rhs-token of a prefix production with its parent.
	producedTokens map[*Token]*Token
}

// parseCyclic implements COPP.
func (w *coppWorker) parse(ctx context.Context, stack *COPPStack, tokens *LOS[Token], nextToken *Token, finalPass bool, resultCh chan<- parseResult[COPPStack], errCh chan<- error) {
	tokensIt := tokens.HeadIterator()

	prefix := make([]TokenType, w.parser.g.MaxRHSLength)
	prefixTokens := make([]*Token, w.parser.g.MaxRHSLength)

	// If the thread is the first, push a # onto the stack
	// Otherwise, push the first inputToken onto the stack
	if !finalPass {
		if w.id == 0 {
			stack.Push(&Token{
				Type:       TokenTerm,
				Precedence: PrecEmpty,
			})
		} else {
			t := tokensIt.Next()
			t.Precedence = PrecEmpty
			stack.Push(t)
		}

		// If the thread is the last, push a # onto the tokens m
		// Otherwise, push onto the tokens m the first inputToken of the next tokens m
		if w.id == w.parser.concurrency-1 {
			tokens.Push(Token{
				Type:       TokenTerm,
				Precedence: PrecEmpty,
			})
		} else if nextToken != nil {
			tokens.Push(*nextToken)
		}
	}

	var rhs []TokenType
	var rhsTokens []*Token

	// Iterate over the tokens
	// If this is the first worker, start reading from the input stack, otherwise begin with the last
	// token of the previous stack.
	for inputToken := tokensIt.Next(); inputToken != nil; {
		//If the current inputToken is a non-terminal, push it onto the stack with no precedence relation
		var prec Precedence

		//Find the first terminal on the stack and get the precedence between it and the current tokens inputToken
		firstTerminal := stack.FirstTerminal()

		if !inputToken.Type.IsTerminal() {
			prec = PrecYields
		} else {
			if firstTerminal == nil {
				prec = w.parser.g.precedence(TokenTerm, inputToken.Type)
			} else {
				prec = w.parser.g.precedence(firstTerminal.Type, inputToken.Type)

				if prec == PrecEquals && firstTerminal.Precedence == PrecTakes {
					prec = PrecYields
				}

				if prec == PrecEquals && firstTerminal.Precedence == PrecEmpty {
					prec = PrecTakes
				}
			}
		}

		// If it yields precedence, PUSH the inputToken onto the stack with its precedence relation.
		if prec == PrecYields {
			t := inputToken
			if inputToken.Type.IsTerminal() {
				inputToken.Precedence = prec
				inputToken = stack.Push(inputToken)
			}

			// If the current construction is a single nonterminal.
			if stack.IsCurrentSingleNonterminal() {
				// Append input character to the current construction.
				stack.AppendStateToken(t)
			} else {
				// Otherwise, swap.
				stack.SwapState()
				stack.AppendStateToken(t)
			}

			inputToken = tokensIt.Next()
		} else if prec == PrecEquals {
			inputToken.Precedence = prec
			// If it is equals, it is probably a shift transition?
			if inputToken.Type == TokenTerm {
				stack.Push(inputToken)
				break
			}

			oldIndex := stack.State.CurrentIndex
			// If the current construction is a single nonterminal.
			if stack.IsCurrentSingleNonterminal() {
				stack.State.CurrentIndex = stack.State.PreviousIndex
				stack.State.CurrentLen += stack.State.PreviousLen
			}

			rhsTokens = rhsTokens[:0]
			rhsTokens = append(rhsTokens, stack.Current()...)
			rhs = rhs[:0]
			for i := range stack.State.CurrentLen {
				rhs = append(rhs, rhsTokens[i].Type)
			}

			lhs, ruleNum := w.parser.g.findMatch(rhs)
			if lhs != TokenEmpty && w.parser.g.Rules[ruleNum].Type != RuleSimple {
				lhsToken, err := w.match(rhs, rhsTokens, true)
				if err != nil {
					errCh <- fmt.Errorf("worker %d could not match: %v", w.id, err)
					return
				}

				// Reset state
				stack.StateTokenStack.Tos = stack.State.CurrentIndex
				stack.State.CurrentLen = 0
				stack.AppendStateToken(lhsToken)

				_ = oldIndex
			}

			stack.AppendStateToken(inputToken)

			// Replace the topmost token on the stack, keeping its state unchanged.
			_, s := stack.Pop2()
			stack.PushWithState(inputToken, *s)

			inputToken = tokensIt.Next()
		} else if prec == PrecTakes {
			//If there are no tokens yielding precedence on the stack, push inputToken onto the stack.
			//Otherwise, perform a reduction. (Reduction == Pop/Shift move?)
			if stack.YieldingPrecedence() == 0 {
				inputToken.Precedence = prec
				stack.Push(inputToken)

				if inputToken.Type != TokenTerm {
					stack.SwapState()
				}

				inputToken = tokensIt.Next()
			} else {
				var i int
				// Prefix is made of a single nonterminal
				prefixTokens = prefixTokens[:0]
				prefix = prefix[:0]

				if stack.IsCurrentSingleNonterminal() {
					prefixTokens = append(prefixTokens, stack.Previous()...)
					for i = 0; i < stack.State.PreviousLen; i++ {
						prefix = append(prefix, prefixTokens[i].Type)
					}
				}

				prefixTokens = append(prefixTokens, stack.Current()...)
				for j := 0; j < stack.State.CurrentLen; j++ {
					prefix = append(prefix, prefixTokens[i].Type)

					i++
				}

				_, st := stack.Pop2()
				stack.UpdateFirstTerminal()

				// Prefix is made of a single nonterminal
				if st.CurrentLen == 1 && !stack.StateTokenStack.Data[st.CurrentIndex].IsTerminal() {
					stack.State.PreviousIndex = st.PreviousIndex
					stack.State.PreviousLen = st.PreviousLen
				} else {
					stack.State.PreviousIndex = st.CurrentIndex
					stack.State.PreviousLen = st.CurrentLen
				}

				rhsTokens = prefixTokens[:i]
				rhs = prefix[:i]

				lhsToken, err := w.match(rhs, rhsTokens, false)
				if err != nil {
					errCh <- fmt.Errorf("worker %d could not match: %v", w.id, err)
					return
				}

				// Reset state
				stack.StateTokenStack.Tos = stack.State.PreviousIndex + stack.State.PreviousLen + 1
				stack.State.CurrentIndex = stack.StateTokenStack.Tos - 1
				stack.State.CurrentLen = 1
				stack.StateTokenStack.Replace(lhsToken)
			}
		} else {
			//If there's no precedence relation, abort the parsing
			errCh <- fmt.Errorf("no precedence relation found")
			return
		}
	}

	resultCh <- parseResult[COPPStack]{w.id, stack}
}

func (w *coppWorker) match(rhs []TokenType, rhsTokens []*Token, isPrefix bool) (*Token, error) {
	lhs, ruleNum := w.parser.g.findMatch(rhs)
	if lhs == TokenEmpty {
		return nil, fmt.Errorf("could not find match for rhs %v", rhs)
	}

	lhsToken := rhsTokens[0]

	ruleType := w.parser.g.Rules[ruleNum].Type
	if ruleType == RuleSimple || ruleType == RuleCyclic {
		lhsToken = w.ntPool.Get()
		lhsToken.Type = lhs
	}

	//Execute the semantic action
	w.parser.g.Func(ruleNum, lhsToken, rhsTokens, w.id)

	return lhsToken, nil
}

func (w *coppWorker) getNonterminal(rhsTokens []*Token) *Token {
	// Try to find the token associated to the leftmost token.
	lhsToken, ok := w.producedTokens[rhsTokens[0]]
	if !ok {
		lhsToken = w.ntPool.Get()
	}

	return lhsToken
}
