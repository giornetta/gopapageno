// Code generated by Gopapageno; DO NOT EDIT.
package main

import (
	"fmt"
	"github.com/giornetta/gopapageno"
	"strings"
)

import (
	"math"
)

var parserPools []*gopapageno.Pool[int64]

func ParserPreallocMem(inputSize int, numThreads int) {
	parserPools = make([]*gopapageno.Pool[int64], numThreads)

	avgCharsPerNumber := float64(2)
	poolSizePerThread := int(math.Ceil((float64(inputSize) / avgCharsPerNumber) / float64(numThreads)))

	for i := 0; i < numThreads; i++ {
		parserPools[i] = gopapageno.NewPool[int64](poolSizePerThread)
	}
}

// Non-terminals
const (
	E = gopapageno.TokenEmpty + 1 + iota
	S
	T
)

// Terminals
const (
	LPAR = gopapageno.TokenTerm + 1 + iota
	NUMBER
	PLUS
	RPAR
)

func SprintToken[TokenValue any](root *gopapageno.Token) string {
	var sprintRec func(t *gopapageno.Token, sb *strings.Builder, indent string)

	sprintRec = func(t *gopapageno.Token, sb *strings.Builder, indent string) {
		if t == nil {
			return
		}

		sb.WriteString(indent)
		if t.Next == nil {
			sb.WriteString("└── ")
			indent += "    "
		} else {
			sb.WriteString("├── ")
			indent += "|   "
		}

		switch t.Type {
		case E:
			sb.WriteString("E")
		case S:
			sb.WriteString("S")
		case T:
			sb.WriteString("T")
		case gopapageno.TokenEmpty:
			sb.WriteString("Empty")
		case LPAR:
			sb.WriteString("LPAR")
		case NUMBER:
			sb.WriteString("NUMBER")
		case PLUS:
			sb.WriteString("PLUS")
		case RPAR:
			sb.WriteString("RPAR")
		case gopapageno.TokenTerm:
			sb.WriteString("Term")
		default:
			sb.WriteString("Unknown")
		}
		if t.Value != nil {
			sb.WriteString(fmt.Sprintf(": %v", *t.Value.(*TokenValue)))
		}
		sb.WriteString("\n")

		sprintRec(t.Child, sb, indent)
		sprintRec(t.Next, sb, indent[:len(indent)-4])
	}

	var sb strings.Builder

	sprintRec(root, &sb, "")

	return sb.String()
}

func NewGrammar() *gopapageno.Grammar {
	numTerminals := uint16(5)
	numNonTerminals := uint16(4)

	maxRHSLen := 3
	rules := []gopapageno.Rule{
		{S, []gopapageno.TokenType{E}, gopapageno.RuleSimple},
		{E, []gopapageno.TokenType{E, PLUS, E}, gopapageno.RuleCombine},
		{E, []gopapageno.TokenType{E, PLUS, T}, gopapageno.RuleAppendRight},
		{S, []gopapageno.TokenType{S}, gopapageno.RuleSimple},
		{E, []gopapageno.TokenType{T, PLUS, E}, gopapageno.RuleAppendLeft},
		{E, []gopapageno.TokenType{T, PLUS, T}, gopapageno.RuleCyclic},
		{T, []gopapageno.TokenType{LPAR, E, RPAR}, gopapageno.RuleSimple},
		{T, []gopapageno.TokenType{LPAR, T, RPAR}, gopapageno.RuleSimple},
		{T, []gopapageno.TokenType{NUMBER}, gopapageno.RuleSimple},
	}
	compressedRules := []uint16{0, 0, 5, 1, 13, 2, 31, 3, 34, 32769, 52, 32770, 75, 2, 0, 1, 32771, 18, 0, 0, 2, 1, 25, 3, 28, 1, 1, 0, 1, 2, 0, 2, 3, 0, 0, 0, 1, 32771, 39, 0, 0, 2, 1, 46, 3, 49, 1, 4, 0, 1, 5, 0, 0, 0, 2, 1, 59, 3, 67, 0, 0, 1, 32772, 64, 3, 6, 0, 0, 0, 1, 32772, 72, 3, 7, 0, 3, 8, 0}

	maxPrefixLength := 5
	prefixes := [][]gopapageno.TokenType{
		{T, PLUS, T},
		{T, PLUS, T, PLUS, T},
	}
	precMatrix := [][]gopapageno.Precedence{
		{gopapageno.PrecEquals, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEquals},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEquals, gopapageno.PrecTakes},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes},
	}
	bitPackedMatrix := []uint64{
		706460516440404,
	}

	fn := func(rule uint16, lhs *gopapageno.Token, rhs []*gopapageno.Token, thread int) {
		var ruleType gopapageno.RuleType
		switch rule {
		case 0:
			ruleType = gopapageno.RuleSimple

			S0 := lhs
			E1 := rhs[0]

			S0.Child = E1
			S0.LastChild = E1

			{
				S0.Value = E1.Value
			}
			_ = E1
		case 1:
			ruleType = gopapageno.RuleCombine

			E0 := lhs
			E1 := rhs[0]
			PLUS2 := rhs[1]
			E3 := rhs[2]

			E0.LastChild.Next = PLUS2
			PLUS2.Next = E3.Child
			E0.LastChild = E3.LastChild

			{
				newValue := parserPools[thread].Get()
				*newValue = *E1.Value.(*int64) + *E3.Value.(*int64)
				E0.Value = newValue
			}
			_ = E1
			_ = PLUS2
			_ = E3
		case 2:
			ruleType = gopapageno.RuleAppendRight

			E0 := lhs
			E1 := rhs[0]
			PLUS2 := rhs[1]
			T3 := rhs[2]

			E0.LastChild.Next = PLUS2
			PLUS2.Next = T3
			E0.LastChild = T3

			{
				newValue := parserPools[thread].Get()
				*newValue = *E1.Value.(*int64) + *T3.Value.(*int64)
				E0.Value = newValue
			}
			_ = E1
			_ = PLUS2
			_ = T3
		case 3:
			ruleType = gopapageno.RuleSimple

			S0 := lhs
			S1 := rhs[0]

			S0.Child = S1
			S0.LastChild = S1

			{
				S0.Value = S1.Value
			}
			_ = S1
		case 4:
			ruleType = gopapageno.RuleAppendLeft

			E0 := lhs
			T1 := rhs[0]
			PLUS2 := rhs[1]
			E3 := rhs[2]

			oldChild := E0
			E0.Child = T1
			T1.Next = PLUS2
			PLUS2.Next = E3
			E3.Next = oldChild

			{
				newValue := parserPools[thread].Get()
				*newValue = *T1.Value.(*int64) + *E3.Value.(*int64)
				E0.Value = newValue
			}
			_ = T1
			_ = PLUS2
			_ = E3
		case 5:
			ruleType = gopapageno.RuleCyclic

			E0 := lhs
			T1 := rhs[0]
			PLUS2 := rhs[1]
			T3 := rhs[2]

			E0.Child = T1
			T1.Next = PLUS2
			PLUS2.Next = T3
			E0.LastChild = T3

			{
				newValue := parserPools[thread].Get()
				*newValue = *T1.Value.(*int64) + *T3.Value.(*int64)
				E0.Value = newValue
			}
			_ = T1
			_ = PLUS2
			_ = T3
		case 6:
			ruleType = gopapageno.RuleSimple

			T0 := lhs
			LPAR1 := rhs[0]
			E2 := rhs[1]
			RPAR3 := rhs[2]

			T0.Child = LPAR1
			LPAR1.Next = E2
			E2.Next = RPAR3
			T0.LastChild = RPAR3

			{
				T0.Value = E2.Value
			}
			_ = LPAR1
			_ = E2
			_ = RPAR3
		case 7:
			ruleType = gopapageno.RuleSimple

			T0 := lhs
			LPAR1 := rhs[0]
			T2 := rhs[1]
			RPAR3 := rhs[2]

			T0.Child = LPAR1
			LPAR1.Next = T2
			T2.Next = RPAR3
			T0.LastChild = RPAR3

			{
				T0.Value = T2.Value
			}
			_ = LPAR1
			_ = T2
			_ = RPAR3
		case 8:
			ruleType = gopapageno.RuleSimple

			T0 := lhs
			NUMBER1 := rhs[0]

			T0.Child = NUMBER1
			T0.LastChild = NUMBER1

			{
				T0.Value = NUMBER1.Value
			}
			_ = NUMBER1
		}
		_ = ruleType
	}

	return &gopapageno.Grammar{
		NumTerminals:              numTerminals,
		NumNonterminals:           numNonTerminals,
		MaxRHSLength:              maxRHSLen,
		Rules:                     rules,
		CompressedRules:           compressedRules,
		PrecedenceMatrix:          precMatrix,
		BitPackedPrecedenceMatrix: bitPackedMatrix,
		MaxPrefixLength:           maxPrefixLength,
		Prefixes:                  prefixes,
		Func:                      fn,
		ParsingStrategy:           gopapageno.COPP,
		PreambleFunc:              ParserPreallocMem,
	}
}
