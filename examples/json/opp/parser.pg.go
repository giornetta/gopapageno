// Code generated by Gopapageno; DO NOT EDIT.
package main

import (
	"fmt"
	"github.com/giornetta/gopapageno"
	"strings"
)

func ParserPreallocMem(inputSize int, numThreads int) {
}

// Non-terminals
const (
	Array_Elements_Value = gopapageno.TokenEmpty + 1 + iota
	Document_Elements_Object_Value
	Elements
	Elements_Value
	Members
	Members_Pair
	NEW_AXIOM
)

// Terminals
const (
	COLON = gopapageno.TokenTerm + 1 + iota
	COMMA
	Document_Elements_Value
	LCURLY
	LSQUARE
	NUMBER
	RCURLY
	RSQUARE
	STRING
)

func SprintToken[TokenValue any](root *gopapageno.Token) string {
	var sprintRec func(t *gopapageno.Token, sb *strings.Builder, indent string)

	sprintRec = func(t *gopapageno.Token, sb *strings.Builder, indent string) {
		if t == nil {
			return
		}

		sb.WriteString(indent)
		if t.Next == nil {
			sb.WriteString("└── ")
			indent += "    "
		} else {
			sb.WriteString("├── ")
			indent += "|   "
		}

		switch t.Type {
		case Array_Elements_Value:
			sb.WriteString("Array_Elements_Value")
		case Document_Elements_Object_Value:
			sb.WriteString("Document_Elements_Object_Value")
		case Elements:
			sb.WriteString("Elements")
		case Elements_Value:
			sb.WriteString("Elements_Value")
		case Members:
			sb.WriteString("Members")
		case Members_Pair:
			sb.WriteString("Members_Pair")
		case NEW_AXIOM:
			sb.WriteString("NEW_AXIOM")
		case gopapageno.TokenEmpty:
			sb.WriteString("Empty")
		case COLON:
			sb.WriteString("COLON")
		case COMMA:
			sb.WriteString("COMMA")
		case Document_Elements_Value:
			sb.WriteString("Document_Elements_Value")
		case LCURLY:
			sb.WriteString("LCURLY")
		case LSQUARE:
			sb.WriteString("LSQUARE")
		case NUMBER:
			sb.WriteString("NUMBER")
		case RCURLY:
			sb.WriteString("RCURLY")
		case RSQUARE:
			sb.WriteString("RSQUARE")
		case STRING:
			sb.WriteString("STRING")
		case gopapageno.TokenTerm:
			sb.WriteString("Term")
		default:
			sb.WriteString("Unknown")
		}
		if t.Value != nil {
			sb.WriteString(fmt.Sprintf(": %v", *t.Value.(*TokenValue)))
		}
		sb.WriteString("\n")

		sprintRec(t.Child, sb, indent)
		sprintRec(t.Next, sb, indent[:len(indent)-4])
	}

	var sb strings.Builder

	sprintRec(root, &sb, "")

	return sb.String()
}

func NewParser(opts ...gopapageno.ParserOpt) *gopapageno.Parser {
	numTerminals := uint16(10)
	numNonTerminals := uint16(8)

	maxRHSLen := 3
	rules := []gopapageno.Rule{
		{Elements, []gopapageno.TokenType{Array_Elements_Value, COMMA, Array_Elements_Value}},
		{Elements, []gopapageno.TokenType{Array_Elements_Value, COMMA, Document_Elements_Object_Value}},
		{Elements, []gopapageno.TokenType{Array_Elements_Value, COMMA, Elements_Value}},
		{Elements, []gopapageno.TokenType{Array_Elements_Value, COMMA, Document_Elements_Value}},
		{NEW_AXIOM, []gopapageno.TokenType{Document_Elements_Object_Value}},
		{Elements, []gopapageno.TokenType{Document_Elements_Object_Value, COMMA, Array_Elements_Value}},
		{Elements, []gopapageno.TokenType{Document_Elements_Object_Value, COMMA, Document_Elements_Object_Value}},
		{Elements, []gopapageno.TokenType{Document_Elements_Object_Value, COMMA, Elements_Value}},
		{Elements, []gopapageno.TokenType{Document_Elements_Object_Value, COMMA, Document_Elements_Value}},
		{Elements, []gopapageno.TokenType{Elements, COMMA, Array_Elements_Value}},
		{Elements, []gopapageno.TokenType{Elements, COMMA, Document_Elements_Object_Value}},
		{Elements, []gopapageno.TokenType{Elements, COMMA, Elements_Value}},
		{Elements, []gopapageno.TokenType{Elements, COMMA, Document_Elements_Value}},
		{Elements, []gopapageno.TokenType{Elements_Value, COMMA, Array_Elements_Value}},
		{Elements, []gopapageno.TokenType{Elements_Value, COMMA, Document_Elements_Object_Value}},
		{Elements, []gopapageno.TokenType{Elements_Value, COMMA, Elements_Value}},
		{Elements, []gopapageno.TokenType{Elements_Value, COMMA, Document_Elements_Value}},
		{Members, []gopapageno.TokenType{Members, COMMA, Members_Pair}},
		{Members, []gopapageno.TokenType{Members_Pair, COMMA, Members_Pair}},
		{NEW_AXIOM, []gopapageno.TokenType{Document_Elements_Value}},
		{Elements, []gopapageno.TokenType{Document_Elements_Value, COMMA, Array_Elements_Value}},
		{Elements, []gopapageno.TokenType{Document_Elements_Value, COMMA, Document_Elements_Object_Value}},
		{Elements, []gopapageno.TokenType{Document_Elements_Value, COMMA, Elements_Value}},
		{Elements, []gopapageno.TokenType{Document_Elements_Value, COMMA, Document_Elements_Value}},
		{Document_Elements_Object_Value, []gopapageno.TokenType{LCURLY, Members, RCURLY}},
		{Document_Elements_Object_Value, []gopapageno.TokenType{LCURLY, Members_Pair, RCURLY}},
		{Document_Elements_Object_Value, []gopapageno.TokenType{LCURLY, RCURLY}},
		{Array_Elements_Value, []gopapageno.TokenType{LSQUARE, Array_Elements_Value, RSQUARE}},
		{Array_Elements_Value, []gopapageno.TokenType{LSQUARE, Document_Elements_Object_Value, RSQUARE}},
		{Array_Elements_Value, []gopapageno.TokenType{LSQUARE, Elements, RSQUARE}},
		{Array_Elements_Value, []gopapageno.TokenType{LSQUARE, Elements_Value, RSQUARE}},
		{Array_Elements_Value, []gopapageno.TokenType{LSQUARE, Document_Elements_Value, RSQUARE}},
		{Array_Elements_Value, []gopapageno.TokenType{LSQUARE, RSQUARE}},
		{Elements_Value, []gopapageno.TokenType{NUMBER}},
		{Elements_Value, []gopapageno.TokenType{STRING}},
		{Members_Pair, []gopapageno.TokenType{STRING, COLON, Array_Elements_Value}},
		{Members_Pair, []gopapageno.TokenType{STRING, COLON, Document_Elements_Object_Value}},
		{Members_Pair, []gopapageno.TokenType{STRING, COLON, Elements_Value}},
		{Members_Pair, []gopapageno.TokenType{STRING, COLON, Document_Elements_Value}},
	}
	compressedRules := []uint16{0, 0, 11, 1, 25, 2, 53, 3, 81, 4, 109, 5, 137, 6, 150, 32771, 163, 32772, 191, 32773, 219, 32774, 277, 32777, 280, 0, 0, 1, 32770, 30, 0, 0, 4, 1, 41, 2, 44, 4, 47, 32771, 50, 3, 0, 0, 3, 1, 0, 3, 2, 0, 3, 3, 0, 7, 4, 1, 32770, 58, 0, 0, 4, 1, 69, 2, 72, 4, 75, 32771, 78, 3, 5, 0, 3, 6, 0, 3, 7, 0, 3, 8, 0, 0, 0, 1, 32770, 86, 0, 0, 4, 1, 97, 2, 100, 4, 103, 32771, 106, 3, 9, 0, 3, 10, 0, 3, 11, 0, 3, 12, 0, 0, 0, 1, 32770, 114, 0, 0, 4, 1, 125, 2, 128, 4, 131, 32771, 134, 3, 13, 0, 3, 14, 0, 3, 15, 0, 3, 16, 0, 0, 0, 1, 32770, 142, 0, 0, 1, 6, 147, 5, 17, 0, 0, 0, 1, 32770, 155, 0, 0, 1, 6, 160, 5, 18, 0, 7, 19, 1, 32770, 168, 0, 0, 4, 1, 179, 2, 182, 4, 185, 32771, 188, 3, 20, 0, 3, 21, 0, 3, 22, 0, 3, 23, 0, 0, 0, 3, 5, 200, 6, 208, 32775, 216, 0, 0, 1, 32775, 205, 2, 24, 0, 0, 0, 1, 32775, 213, 2, 25, 0, 2, 26, 0, 0, 0, 6, 1, 234, 2, 242, 3, 250, 4, 258, 32771, 266, 32776, 274, 0, 0, 1, 32776, 239, 1, 27, 0, 0, 0, 1, 32776, 247, 1, 28, 0, 0, 0, 1, 32776, 255, 1, 29, 0, 0, 0, 1, 32776, 263, 1, 30, 0, 0, 0, 1, 32776, 271, 1, 31, 0, 1, 32, 0, 4, 33, 0, 4, 34, 1, 32769, 285, 0, 0, 4, 1, 296, 2, 299, 4, 302, 32771, 305, 6, 35, 0, 6, 36, 0, 6, 37, 0, 6, 38, 0}

	maxPrefixLen := 0
	prefixes := [][]gopapageno.TokenType{}
	precMatrix := [][]gopapageno.Precedence{
		{gopapageno.PrecEquals, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEquals, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEquals, gopapageno.PrecEmpty, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEquals, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEquals, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty},
	}
	bitPackedMatrix := []uint64{
		2780166043277284692, 2468347683884115970, 153826221472490112, 296,
	}

	fn := func(rule uint16, lhs *gopapageno.Token, rhs []*gopapageno.Token, thread int) {
		switch rule {
		case 0:
			Elements0 := lhs
			Array_Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Array_Elements_Value3 := rhs[2]

			Elements0.Child = Array_Elements_Value1
			Array_Elements_Value1.Next = COMMA2
			COMMA2.Next = Array_Elements_Value3

			{
			}
		case 1:
			Elements0 := lhs
			Array_Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Document_Elements_Object_Value3 := rhs[2]

			Elements0.Child = Array_Elements_Value1
			Array_Elements_Value1.Next = COMMA2
			COMMA2.Next = Document_Elements_Object_Value3

			{
			}
		case 2:
			Elements0 := lhs
			Array_Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Elements_Value3 := rhs[2]

			Elements0.Child = Array_Elements_Value1
			Array_Elements_Value1.Next = COMMA2
			COMMA2.Next = Elements_Value3

			{
			}
		case 3:
			Elements0 := lhs
			Array_Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Document_Elements_Value3 := rhs[2]

			Elements0.Child = Array_Elements_Value1
			Array_Elements_Value1.Next = COMMA2
			COMMA2.Next = Document_Elements_Value3

			{
			}
		case 4:
			NEW_AXIOM0 := lhs
			Document_Elements_Object_Value1 := rhs[0]

			NEW_AXIOM0.Child = Document_Elements_Object_Value1

			{
				NEW_AXIOM0.Value = Document_Elements_Object_Value1.Value
			}
		case 5:
			Elements0 := lhs
			Document_Elements_Object_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Array_Elements_Value3 := rhs[2]

			Elements0.Child = Document_Elements_Object_Value1
			Document_Elements_Object_Value1.Next = COMMA2
			COMMA2.Next = Array_Elements_Value3

			{
			}
		case 6:
			Elements0 := lhs
			Document_Elements_Object_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Document_Elements_Object_Value3 := rhs[2]

			Elements0.Child = Document_Elements_Object_Value1
			Document_Elements_Object_Value1.Next = COMMA2
			COMMA2.Next = Document_Elements_Object_Value3

			{
			}
		case 7:
			Elements0 := lhs
			Document_Elements_Object_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Elements_Value3 := rhs[2]

			Elements0.Child = Document_Elements_Object_Value1
			Document_Elements_Object_Value1.Next = COMMA2
			COMMA2.Next = Elements_Value3

			{
			}
		case 8:
			Elements0 := lhs
			Document_Elements_Object_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Document_Elements_Value3 := rhs[2]

			Elements0.Child = Document_Elements_Object_Value1
			Document_Elements_Object_Value1.Next = COMMA2
			COMMA2.Next = Document_Elements_Value3

			{
			}
		case 9:
			Elements0 := lhs
			Elements1 := rhs[0]
			COMMA2 := rhs[1]
			Array_Elements_Value3 := rhs[2]

			Elements0.Child = Elements1
			Elements1.Next = COMMA2
			COMMA2.Next = Array_Elements_Value3

			{
			}
		case 10:
			Elements0 := lhs
			Elements1 := rhs[0]
			COMMA2 := rhs[1]
			Document_Elements_Object_Value3 := rhs[2]

			Elements0.Child = Elements1
			Elements1.Next = COMMA2
			COMMA2.Next = Document_Elements_Object_Value3

			{
			}
		case 11:
			Elements0 := lhs
			Elements1 := rhs[0]
			COMMA2 := rhs[1]
			Elements_Value3 := rhs[2]

			Elements0.Child = Elements1
			Elements1.Next = COMMA2
			COMMA2.Next = Elements_Value3

			{
			}
		case 12:
			Elements0 := lhs
			Elements1 := rhs[0]
			COMMA2 := rhs[1]
			Document_Elements_Value3 := rhs[2]

			Elements0.Child = Elements1
			Elements1.Next = COMMA2
			COMMA2.Next = Document_Elements_Value3

			{
			}
		case 13:
			Elements0 := lhs
			Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Array_Elements_Value3 := rhs[2]

			Elements0.Child = Elements_Value1
			Elements_Value1.Next = COMMA2
			COMMA2.Next = Array_Elements_Value3

			{
			}
		case 14:
			Elements0 := lhs
			Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Document_Elements_Object_Value3 := rhs[2]

			Elements0.Child = Elements_Value1
			Elements_Value1.Next = COMMA2
			COMMA2.Next = Document_Elements_Object_Value3

			{
			}
		case 15:
			Elements0 := lhs
			Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Elements_Value3 := rhs[2]

			Elements0.Child = Elements_Value1
			Elements_Value1.Next = COMMA2
			COMMA2.Next = Elements_Value3

			{
			}
		case 16:
			Elements0 := lhs
			Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Document_Elements_Value3 := rhs[2]

			Elements0.Child = Elements_Value1
			Elements_Value1.Next = COMMA2
			COMMA2.Next = Document_Elements_Value3

			{
			}
		case 17:
			Members0 := lhs
			Members1 := rhs[0]
			COMMA2 := rhs[1]
			Members_Pair3 := rhs[2]

			Members0.Child = Members1
			Members1.Next = COMMA2
			COMMA2.Next = Members_Pair3

			{
			}
		case 18:
			Members0 := lhs
			Members_Pair1 := rhs[0]
			COMMA2 := rhs[1]
			Members_Pair3 := rhs[2]

			Members0.Child = Members_Pair1
			Members_Pair1.Next = COMMA2
			COMMA2.Next = Members_Pair3

			{
			}
		case 19:
			NEW_AXIOM0 := lhs
			Document_Elements_Value1 := rhs[0]

			NEW_AXIOM0.Child = Document_Elements_Value1

			{
				NEW_AXIOM0.Value = Document_Elements_Value1.Value
			}
		case 20:
			Elements0 := lhs
			Document_Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Array_Elements_Value3 := rhs[2]

			Elements0.Child = Document_Elements_Value1
			Document_Elements_Value1.Next = COMMA2
			COMMA2.Next = Array_Elements_Value3

			{
			}
		case 21:
			Elements0 := lhs
			Document_Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Document_Elements_Object_Value3 := rhs[2]

			Elements0.Child = Document_Elements_Value1
			Document_Elements_Value1.Next = COMMA2
			COMMA2.Next = Document_Elements_Object_Value3

			{
			}
		case 22:
			Elements0 := lhs
			Document_Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Elements_Value3 := rhs[2]

			Elements0.Child = Document_Elements_Value1
			Document_Elements_Value1.Next = COMMA2
			COMMA2.Next = Elements_Value3

			{
			}
		case 23:
			Elements0 := lhs
			Document_Elements_Value1 := rhs[0]
			COMMA2 := rhs[1]
			Document_Elements_Value3 := rhs[2]

			Elements0.Child = Document_Elements_Value1
			Document_Elements_Value1.Next = COMMA2
			COMMA2.Next = Document_Elements_Value3

			{
			}
		case 24:
			Document_Elements_Object_Value0 := lhs
			LCURLY1 := rhs[0]
			Members2 := rhs[1]
			RCURLY3 := rhs[2]

			Document_Elements_Object_Value0.Child = LCURLY1
			LCURLY1.Next = Members2
			Members2.Next = RCURLY3

			{
			}
		case 25:
			Document_Elements_Object_Value0 := lhs
			LCURLY1 := rhs[0]
			Members_Pair2 := rhs[1]
			RCURLY3 := rhs[2]

			Document_Elements_Object_Value0.Child = LCURLY1
			LCURLY1.Next = Members_Pair2
			Members_Pair2.Next = RCURLY3

			{
			}
		case 26:
			Document_Elements_Object_Value0 := lhs
			LCURLY1 := rhs[0]
			RCURLY2 := rhs[1]

			Document_Elements_Object_Value0.Child = LCURLY1
			LCURLY1.Next = RCURLY2

			{
			}
		case 27:
			Array_Elements_Value0 := lhs
			LSQUARE1 := rhs[0]
			Array_Elements_Value2 := rhs[1]
			RSQUARE3 := rhs[2]

			Array_Elements_Value0.Child = LSQUARE1
			LSQUARE1.Next = Array_Elements_Value2
			Array_Elements_Value2.Next = RSQUARE3

			{
			}
		case 28:
			Array_Elements_Value0 := lhs
			LSQUARE1 := rhs[0]
			Document_Elements_Object_Value2 := rhs[1]
			RSQUARE3 := rhs[2]

			Array_Elements_Value0.Child = LSQUARE1
			LSQUARE1.Next = Document_Elements_Object_Value2
			Document_Elements_Object_Value2.Next = RSQUARE3

			{
			}
		case 29:
			Array_Elements_Value0 := lhs
			LSQUARE1 := rhs[0]
			Elements2 := rhs[1]
			RSQUARE3 := rhs[2]

			Array_Elements_Value0.Child = LSQUARE1
			LSQUARE1.Next = Elements2
			Elements2.Next = RSQUARE3

			{
			}
		case 30:
			Array_Elements_Value0 := lhs
			LSQUARE1 := rhs[0]
			Elements_Value2 := rhs[1]
			RSQUARE3 := rhs[2]

			Array_Elements_Value0.Child = LSQUARE1
			LSQUARE1.Next = Elements_Value2
			Elements_Value2.Next = RSQUARE3

			{
			}
		case 31:
			Array_Elements_Value0 := lhs
			LSQUARE1 := rhs[0]
			Document_Elements_Value2 := rhs[1]
			RSQUARE3 := rhs[2]

			Array_Elements_Value0.Child = LSQUARE1
			LSQUARE1.Next = Document_Elements_Value2
			Document_Elements_Value2.Next = RSQUARE3

			{
			}
		case 32:
			Array_Elements_Value0 := lhs
			LSQUARE1 := rhs[0]
			RSQUARE2 := rhs[1]

			Array_Elements_Value0.Child = LSQUARE1
			LSQUARE1.Next = RSQUARE2

			{
			}
		case 33:
			Elements_Value0 := lhs
			NUMBER1 := rhs[0]

			Elements_Value0.Child = NUMBER1

			{
			}
		case 34:
			Elements_Value0 := lhs
			STRING1 := rhs[0]

			Elements_Value0.Child = STRING1

			{
			}
		case 35:
			Members_Pair0 := lhs
			STRING1 := rhs[0]
			COLON2 := rhs[1]
			Array_Elements_Value3 := rhs[2]

			Members_Pair0.Child = STRING1
			STRING1.Next = COLON2
			COLON2.Next = Array_Elements_Value3

			{
			}
		case 36:
			Members_Pair0 := lhs
			STRING1 := rhs[0]
			COLON2 := rhs[1]
			Document_Elements_Object_Value3 := rhs[2]

			Members_Pair0.Child = STRING1
			STRING1.Next = COLON2
			COLON2.Next = Document_Elements_Object_Value3

			{
			}
		case 37:
			Members_Pair0 := lhs
			STRING1 := rhs[0]
			COLON2 := rhs[1]
			Elements_Value3 := rhs[2]

			Members_Pair0.Child = STRING1
			STRING1.Next = COLON2
			COLON2.Next = Elements_Value3

			{
			}
		case 38:
			Members_Pair0 := lhs
			STRING1 := rhs[0]
			COLON2 := rhs[1]
			Document_Elements_Value3 := rhs[2]

			Members_Pair0.Child = STRING1
			STRING1.Next = COLON2
			COLON2.Next = Document_Elements_Value3

			{
			}
		}
	}

	return gopapageno.NewParser(
		NewLexer(),
		numTerminals,
		numNonTerminals,
		maxRHSLen,
		rules,
		compressedRules,
		prefixes,
		maxPrefixLen,
		precMatrix,
		bitPackedMatrix,
		fn,
		gopapageno.OPP,
		opts...)
}
