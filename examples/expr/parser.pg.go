// Code generated by Gopapageno; DO NOT EDIT.
package main

import "github.com/giornetta/gopapageno"

import (
	"math"
)

var parserInt64Pools []*gopapageno.Pool[int64]
var parserInt64Pools []*gopapageno.Pool[int64]

// parserPreallocMem initializes all the memory pools required by the semantic function of the parser.
func ParserPreallocMem(inputSize int, numThreads int) {
	parserInt64Pools = make([]*gopapageno.Pool[int64], numThreads)

	avgCharsPerNumber := float64(4)
	poolSizePerThread := int(math.Ceil((float64(inputSize) / avgCharsPerNumber) / float64(numThreads)))

	for i := 0; i < numThreads; i++ {
		parserInt64Pools[i] = gopapageno.NewPool[int64](poolSizePerThread)
	}
}

// Non-terminals
const (
	E_F_S_T = gopapageno.TokenEmpty + 1 + iota
	E_S
	E_S_T
	NEW_AXIOM
)

// Terminals
const (
	LPAR = gopapageno.TokenTerm + 1 + iota
	NUMBER
	PLUS
	RPAR
	TIMES
)

func NewParser(opts ...gopapageno.ParserOpt) *gopapageno.Parser {
	numTerminals := uint16(6)
	numNonTerminals := uint16(5)

	maxRHSLen := 3
	rules := []gopapageno.Rule{
		{NEW_AXIOM, []gopapageno.TokenType{E_F_S_T}},
		{E_S, []gopapageno.TokenType{E_F_S_T, PLUS, E_F_S_T}},
		{E_S, []gopapageno.TokenType{E_F_S_T, PLUS, E_S_T}},
		{E_S_T, []gopapageno.TokenType{E_F_S_T, TIMES, E_F_S_T}},
		{NEW_AXIOM, []gopapageno.TokenType{E_S}},
		{E_S, []gopapageno.TokenType{E_S, PLUS, E_F_S_T}},
		{E_S, []gopapageno.TokenType{E_S, PLUS, E_S_T}},
		{NEW_AXIOM, []gopapageno.TokenType{E_S_T}},
		{E_S, []gopapageno.TokenType{E_S_T, PLUS, E_F_S_T}},
		{E_S, []gopapageno.TokenType{E_S_T, PLUS, E_S_T}},
		{E_S_T, []gopapageno.TokenType{E_S_T, TIMES, E_F_S_T}},
		{E_F_S_T, []gopapageno.TokenType{LPAR, E_F_S_T, RPAR}},
		{E_F_S_T, []gopapageno.TokenType{LPAR, E_S, RPAR}},
		{E_F_S_T, []gopapageno.TokenType{LPAR, E_S_T, RPAR}},
		{E_F_S_T, []gopapageno.TokenType{NUMBER}},
	}
	compressedRules := []uint16{0, 0, 5, 1, 13, 2, 41, 3, 59, 32769, 87, 32770, 120, 4, 0, 2, 32771, 20, 32773, 33, 0, 0, 2, 1, 27, 3, 30, 2, 1, 0, 2, 2, 0, 0, 0, 1, 1, 38, 3, 3, 0, 4, 4, 1, 32771, 46, 0, 0, 2, 1, 53, 3, 56, 2, 5, 0, 2, 6, 0, 4, 7, 2, 32771, 66, 32773, 79, 0, 0, 2, 1, 73, 3, 76, 2, 8, 0, 2, 9, 0, 0, 0, 1, 1, 84, 3, 10, 0, 0, 0, 3, 1, 96, 2, 104, 3, 112, 0, 0, 1, 32772, 101, 1, 11, 0, 0, 0, 1, 32772, 109, 1, 12, 0, 0, 0, 1, 32772, 117, 1, 13, 0, 1, 14, 0}

	precMatrix := [][]gopapageno.Precedence{
		{gopapageno.PrecEquals, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEquals, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes},
	}
	bitPackedMatrix := []uint64{
		3079943359210463233, 168,
	}

	fn := func(rule uint16, lhs *gopapageno.Token, rhs []*gopapageno.Token, thread int) {
		switch rule {
		case 0:
			NEW_AXIOM0 := lhs
			E_F_S_T1 := rhs[0]

			NEW_AXIOM0.Child = E_F_S_T1

			{
				NEW_AXIOM0.Value = E_F_S_T1.Value
			}
		case 1:
			E_S0 := lhs
			E_F_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			E_F_S_T3 := rhs[2]

			E_S0.Child = E_F_S_T1
			E_F_S_T1.Next = PLUS2
			PLUS2.Next = E_F_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *E_F_S_T1.Value.(*int64) + *E_F_S_T3.Value.(*int64)
				E_S0.Value = newValue
			}
		case 2:
			E_S0 := lhs
			E_F_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			E_S_T3 := rhs[2]

			E_S0.Child = E_F_S_T1
			E_F_S_T1.Next = PLUS2
			PLUS2.Next = E_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *E_F_S_T1.Value.(*int64) + *E_S_T3.Value.(*int64)
				E_S0.Value = newValue
			}
		case 3:
			E_S_T0 := lhs
			E_F_S_T1 := rhs[0]
			TIMES2 := rhs[1]
			E_F_S_T3 := rhs[2]

			E_S_T0.Child = E_F_S_T1
			E_F_S_T1.Next = TIMES2
			TIMES2.Next = E_F_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *E_F_S_T1.Value.(*int64) * *E_F_S_T3.Value.(*int64)
				E_S_T0.Value = newValue
			}
		case 4:
			NEW_AXIOM0 := lhs
			E_S1 := rhs[0]

			NEW_AXIOM0.Child = E_S1

			{
				NEW_AXIOM0.Value = E_S1.Value
			}
		case 5:
			E_S0 := lhs
			E_S1 := rhs[0]
			PLUS2 := rhs[1]
			E_F_S_T3 := rhs[2]

			E_S0.Child = E_S1
			E_S1.Next = PLUS2
			PLUS2.Next = E_F_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *E_S1.Value.(*int64) + *E_F_S_T3.Value.(*int64)
				E_S0.Value = newValue
			}
		case 6:
			E_S0 := lhs
			E_S1 := rhs[0]
			PLUS2 := rhs[1]
			E_S_T3 := rhs[2]

			E_S0.Child = E_S1
			E_S1.Next = PLUS2
			PLUS2.Next = E_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *E_S1.Value.(*int64) + *E_S_T3.Value.(*int64)
				E_S0.Value = newValue
			}
		case 7:
			NEW_AXIOM0 := lhs
			E_S_T1 := rhs[0]

			NEW_AXIOM0.Child = E_S_T1

			{
				NEW_AXIOM0.Value = E_S_T1.Value
			}
		case 8:
			E_S0 := lhs
			E_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			E_F_S_T3 := rhs[2]

			E_S0.Child = E_S_T1
			E_S_T1.Next = PLUS2
			PLUS2.Next = E_F_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *E_S_T1.Value.(*int64) + *E_F_S_T3.Value.(*int64)
				E_S0.Value = newValue
			}
		case 9:
			E_S0 := lhs
			E_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			E_S_T3 := rhs[2]

			E_S0.Child = E_S_T1
			E_S_T1.Next = PLUS2
			PLUS2.Next = E_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *E_S_T1.Value.(*int64) + *E_S_T3.Value.(*int64)
				E_S0.Value = newValue
			}
		case 10:
			E_S_T0 := lhs
			E_S_T1 := rhs[0]
			TIMES2 := rhs[1]
			E_F_S_T3 := rhs[2]

			E_S_T0.Child = E_S_T1
			E_S_T1.Next = TIMES2
			TIMES2.Next = E_F_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *E_S_T1.Value.(*int64) * *E_F_S_T3.Value.(*int64)
				E_S_T0.Value = newValue
			}
		case 11:
			E_F_S_T0 := lhs
			LPAR1 := rhs[0]
			E_F_S_T2 := rhs[1]
			RPAR3 := rhs[2]

			E_F_S_T0.Child = LPAR1
			LPAR1.Next = E_F_S_T2
			E_F_S_T2.Next = RPAR3

			{
				E_F_S_T0.Value = E_F_S_T2.Value
			}
		case 12:
			E_F_S_T0 := lhs
			LPAR1 := rhs[0]
			E_S2 := rhs[1]
			RPAR3 := rhs[2]

			E_F_S_T0.Child = LPAR1
			LPAR1.Next = E_S2
			E_S2.Next = RPAR3

			{
				E_F_S_T0.Value = E_S2.Value
			}
		case 13:
			E_F_S_T0 := lhs
			LPAR1 := rhs[0]
			E_S_T2 := rhs[1]
			RPAR3 := rhs[2]

			E_F_S_T0.Child = LPAR1
			LPAR1.Next = E_S_T2
			E_S_T2.Next = RPAR3

			{
				E_F_S_T0.Value = E_S_T2.Value
			}
		case 14:
			E_F_S_T0 := lhs
			NUMBER1 := rhs[0]

			E_F_S_T0.Child = NUMBER1

			{
				E_F_S_T0.Value = NUMBER1.Value
			}
		}
	}

	return gopapageno.NewParser(
		NewLexer(),
		numTerminals,
		numNonTerminals,
		maxRHSLen,
		rules,
		compressedRules,
		precMatrix,
		bitPackedMatrix,
		fn,
		opts...)
}
