// Code generated by Gopapageno; DO NOT EDIT.
package main

import (
	"fmt"
	"github.com/giornetta/gopapageno"
	"strings"
)

import (
	"math"
)

var parserInt64Pools []*gopapageno.Pool[int64]

// ParserPreallocMem initializes all the memory pools required by the semantic function of the parser.
func ParserPreallocMem(inputSize int, numThreads int) {
	parserInt64Pools = make([]*gopapageno.Pool[int64], numThreads)

	avgCharsPerNumber := float64(4)
	poolSizePerThread := int(math.Ceil((float64(inputSize) / avgCharsPerNumber) / float64(numThreads)))

	for i := 0; i < numThreads; i++ {
		parserInt64Pools[i] = gopapageno.NewPool[int64](poolSizePerThread)
	}
}

// Non-terminals
const (
	D_E_P_S_T = gopapageno.TokenEmpty + 1 + iota
	D_S_T
	NEW_AXIOM
	P_S
)

// Terminals
const (
	DIVIDE = gopapageno.TokenTerm + 1 + iota
	LPAR
	NUMBER
	PLUS
	RPAR
	S
)

func SprintToken[TokenValue any](root *gopapageno.Token) string {
	var sprintRec func(t *gopapageno.Token, sb *strings.Builder, indent string)

	sprintRec = func(t *gopapageno.Token, sb *strings.Builder, indent string) {
		if t == nil {
			return
		}

		sb.WriteString(indent)
		if t.Next == nil {
			sb.WriteString("└── ")
			indent += "    "
		} else {
			sb.WriteString("├── ")
			indent += "|   "
		}

		switch t.Type {
		case D_E_P_S_T:
			sb.WriteString("D_E_P_S_T")
		case D_S_T:
			sb.WriteString("D_S_T")
		case NEW_AXIOM:
			sb.WriteString("NEW_AXIOM")
		case P_S:
			sb.WriteString("P_S")
		case gopapageno.TokenEmpty:
			sb.WriteString("Empty")
		case DIVIDE:
			sb.WriteString("DIVIDE")
		case LPAR:
			sb.WriteString("LPAR")
		case NUMBER:
			sb.WriteString("NUMBER")
		case PLUS:
			sb.WriteString("PLUS")
		case RPAR:
			sb.WriteString("RPAR")
		case S:
			sb.WriteString("S")
		case gopapageno.TokenTerm:
			sb.WriteString("Term")
		default:
			sb.WriteString("Unknown")
		}
		if t.Value != nil {
			sb.WriteString(fmt.Sprintf(": %v", *t.Value.(*TokenValue)))
		}
		sb.WriteString("\n")

		sprintRec(t.Child, sb, indent)
		sprintRec(t.Next, sb, indent[:len(indent)-4])
	}

	var sb strings.Builder

	sprintRec(root, &sb, "")

	return sb.String()
}

func NewParser(opts ...gopapageno.ParserOpt) *gopapageno.Parser {
	numTerminals := uint16(7)
	numNonTerminals := uint16(5)

	maxRHSLen := 3
	rules := []gopapageno.Rule{
		{NEW_AXIOM, []gopapageno.TokenType{D_E_P_S_T}, gopapageno.RuleSimple},
		{D_S_T, []gopapageno.TokenType{D_E_P_S_T, DIVIDE, D_E_P_S_T}, gopapageno.RuleSimple},
		{P_S, []gopapageno.TokenType{D_E_P_S_T, PLUS, D_E_P_S_T}, gopapageno.RuleCyclic},
		{P_S, []gopapageno.TokenType{D_E_P_S_T, PLUS, D_S_T}, gopapageno.RuleCyclic},
		{P_S, []gopapageno.TokenType{D_E_P_S_T, PLUS, P_S}, gopapageno.RuleAppendLeft},
		{P_S, []gopapageno.TokenType{D_E_P_S_T, PLUS, P_S}, gopapageno.RuleAppendLeft},
		{NEW_AXIOM, []gopapageno.TokenType{D_S_T}, gopapageno.RuleSimple},
		{D_S_T, []gopapageno.TokenType{D_S_T, DIVIDE, D_E_P_S_T}, gopapageno.RuleSimple},
		{P_S, []gopapageno.TokenType{D_S_T, PLUS, D_E_P_S_T}, gopapageno.RuleCyclic},
		{P_S, []gopapageno.TokenType{D_S_T, PLUS, D_S_T}, gopapageno.RuleCyclic},
		{P_S, []gopapageno.TokenType{D_S_T, PLUS, P_S}, gopapageno.RuleAppendLeft},
		{P_S, []gopapageno.TokenType{D_S_T, PLUS, P_S}, gopapageno.RuleAppendLeft},
		{NEW_AXIOM, []gopapageno.TokenType{P_S}, gopapageno.RuleSimple},
		{P_S, []gopapageno.TokenType{P_S, PLUS, D_E_P_S_T}, gopapageno.RuleAppendRight},
		{P_S, []gopapageno.TokenType{P_S, PLUS, D_E_P_S_T}, gopapageno.RuleAppendRight},
		{P_S, []gopapageno.TokenType{P_S, PLUS, D_S_T}, gopapageno.RuleAppendRight},
		{P_S, []gopapageno.TokenType{P_S, PLUS, D_S_T}, gopapageno.RuleAppendRight},
		{P_S, []gopapageno.TokenType{P_S, PLUS, P_S}, gopapageno.RuleCombine},
		{P_S, []gopapageno.TokenType{P_S, PLUS, P_S}, gopapageno.RuleCombine},
		{P_S, []gopapageno.TokenType{P_S, PLUS, P_S}, gopapageno.RuleCombine},
		{P_S, []gopapageno.TokenType{P_S, PLUS, P_S}, gopapageno.RuleCombine},
		{D_E_P_S_T, []gopapageno.TokenType{LPAR, D_E_P_S_T, RPAR}, gopapageno.RuleSimple},
		{D_E_P_S_T, []gopapageno.TokenType{LPAR, D_S_T, RPAR}, gopapageno.RuleSimple},
		{D_E_P_S_T, []gopapageno.TokenType{LPAR, P_S, RPAR}, gopapageno.RuleSimple},
		{D_E_P_S_T, []gopapageno.TokenType{LPAR, S, RPAR}, gopapageno.RuleSimple},
		{D_E_P_S_T, []gopapageno.TokenType{NUMBER}, gopapageno.RuleSimple},
		{NEW_AXIOM, []gopapageno.TokenType{S}, gopapageno.RuleSimple},
	}
	compressedRules := []uint16{0, 0, 6, 1, 15, 2, 48, 4, 81, 32770, 104, 32771, 147, 32774, 150, 3, 0, 2, 32769, 22, 32772, 30, 0, 0, 1, 1, 27, 2, 1, 0, 0, 0, 3, 1, 39, 2, 42, 4, 45, 4, 2, 0, 4, 3, 0, 4, 5, 0, 3, 6, 2, 32769, 55, 32772, 63, 0, 0, 1, 1, 60, 2, 7, 0, 0, 0, 3, 1, 72, 2, 75, 4, 78, 4, 8, 0, 4, 9, 0, 4, 11, 0, 3, 12, 1, 32772, 86, 0, 0, 3, 1, 95, 2, 98, 4, 101, 4, 14, 0, 4, 16, 0, 4, 20, 0, 0, 0, 4, 1, 115, 2, 123, 4, 131, 32774, 139, 0, 0, 1, 32773, 120, 1, 21, 0, 0, 0, 1, 32773, 128, 1, 22, 0, 0, 0, 1, 32773, 136, 1, 23, 0, 0, 0, 1, 32773, 144, 1, 24, 0, 1, 25, 0, 3, 26, 0}

	precMatrix := [][]gopapageno.Precedence{
		{gopapageno.PrecEquals, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEquals, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEquals, gopapageno.PrecTakes, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty},
	}
	bitPackedMatrix := []uint64{
		6208256158643688788, 17182130824,
	}

	fn := func(rule uint16, lhs *gopapageno.Token, rhs []*gopapageno.Token, thread int) {
		var ruleType gopapageno.RuleType
		switch rule {
		case 0:
			ruleType = gopapageno.RuleSimple

			NEW_AXIOM0 := lhs
			D_E_P_S_T1 := rhs[0]

			NEW_AXIOM0.Child = D_E_P_S_T1
			NEW_AXIOM0.LastChild = D_E_P_S_T1

			{
				NEW_AXIOM0.Value = D_E_P_S_T1.Value
			}
			_ = D_E_P_S_T1
		case 1:
			ruleType = gopapageno.RuleSimple

			D_S_T0 := lhs
			D_E_P_S_T1 := rhs[0]
			DIVIDE2 := rhs[1]
			D_E_P_S_T3 := rhs[2]

			D_S_T0.Child = D_E_P_S_T1
			D_E_P_S_T1.Next = DIVIDE2
			DIVIDE2.Next = D_E_P_S_T3
			D_S_T0.LastChild = D_E_P_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *D_E_P_S_T1.Value.(*int64) / *D_E_P_S_T3.Value.(*int64)
				D_S_T0.Value = newValue
			}
			_ = D_E_P_S_T1
			_ = DIVIDE2
			_ = D_E_P_S_T3
		case 2:
			ruleType = gopapageno.RuleCyclic

			P_S0 := lhs
			D_E_P_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			D_E_P_S_T3 := rhs[2]

			P_S0.Child = D_E_P_S_T1
			D_E_P_S_T1.Next = PLUS2
			PLUS2.Next = D_E_P_S_T3
			P_S0.LastChild = D_E_P_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *D_E_P_S_T1.Value.(*int64) + *D_E_P_S_T3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = D_E_P_S_T1
			_ = PLUS2
			_ = D_E_P_S_T3
		case 3:
			ruleType = gopapageno.RuleCyclic

			P_S0 := lhs
			D_E_P_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			D_S_T3 := rhs[2]

			P_S0.Child = D_E_P_S_T1
			D_E_P_S_T1.Next = PLUS2
			PLUS2.Next = D_S_T3
			P_S0.LastChild = D_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *D_E_P_S_T1.Value.(*int64) + *D_S_T3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = D_E_P_S_T1
			_ = PLUS2
			_ = D_S_T3
		case 4:
			ruleType = gopapageno.RuleAppendLeft

			P_S0 := lhs
			D_E_P_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			P_S3 := rhs[2]

			oldChild := P_S0
			P_S0.Child = D_E_P_S_T1
			D_E_P_S_T1.Next = PLUS2
			PLUS2.Next = P_S3
			P_S3.Next = oldChild

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *D_E_P_S_T1.Value.(*int64) + *P_S3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = D_E_P_S_T1
			_ = PLUS2
			_ = P_S3
		case 5:
			ruleType = gopapageno.RuleAppendLeft

			P_S0 := lhs
			D_E_P_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			P_S3 := rhs[2]

			oldChild := P_S0
			P_S0.Child = D_E_P_S_T1
			D_E_P_S_T1.Next = PLUS2
			PLUS2.Next = P_S3
			P_S3.Next = oldChild

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *D_E_P_S_T1.Value.(*int64) + *P_S3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = D_E_P_S_T1
			_ = PLUS2
			_ = P_S3
		case 6:
			ruleType = gopapageno.RuleSimple

			NEW_AXIOM0 := lhs
			D_S_T1 := rhs[0]

			NEW_AXIOM0.Child = D_S_T1
			NEW_AXIOM0.LastChild = D_S_T1

			{
				NEW_AXIOM0.Value = D_S_T1.Value
			}
			_ = D_S_T1
		case 7:
			ruleType = gopapageno.RuleSimple

			D_S_T0 := lhs
			D_S_T1 := rhs[0]
			DIVIDE2 := rhs[1]
			D_E_P_S_T3 := rhs[2]

			D_S_T0.Child = D_S_T1
			D_S_T1.Next = DIVIDE2
			DIVIDE2.Next = D_E_P_S_T3
			D_S_T0.LastChild = D_E_P_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *D_S_T1.Value.(*int64) / *D_E_P_S_T3.Value.(*int64)
				D_S_T0.Value = newValue
			}
			_ = D_S_T1
			_ = DIVIDE2
			_ = D_E_P_S_T3
		case 8:
			ruleType = gopapageno.RuleCyclic

			P_S0 := lhs
			D_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			D_E_P_S_T3 := rhs[2]

			P_S0.Child = D_S_T1
			D_S_T1.Next = PLUS2
			PLUS2.Next = D_E_P_S_T3
			P_S0.LastChild = D_E_P_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *D_S_T1.Value.(*int64) + *D_E_P_S_T3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = D_S_T1
			_ = PLUS2
			_ = D_E_P_S_T3
		case 9:
			ruleType = gopapageno.RuleCyclic

			P_S0 := lhs
			D_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			D_S_T3 := rhs[2]

			P_S0.Child = D_S_T1
			D_S_T1.Next = PLUS2
			PLUS2.Next = D_S_T3
			P_S0.LastChild = D_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *D_S_T1.Value.(*int64) + *D_S_T3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = D_S_T1
			_ = PLUS2
			_ = D_S_T3
		case 10:
			ruleType = gopapageno.RuleAppendLeft

			P_S0 := lhs
			D_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			P_S3 := rhs[2]

			oldChild := P_S0
			P_S0.Child = D_S_T1
			D_S_T1.Next = PLUS2
			PLUS2.Next = P_S3
			P_S3.Next = oldChild

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *D_S_T1.Value.(*int64) + *P_S3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = D_S_T1
			_ = PLUS2
			_ = P_S3
		case 11:
			ruleType = gopapageno.RuleAppendLeft

			P_S0 := lhs
			D_S_T1 := rhs[0]
			PLUS2 := rhs[1]
			P_S3 := rhs[2]

			oldChild := P_S0
			P_S0.Child = D_S_T1
			D_S_T1.Next = PLUS2
			PLUS2.Next = P_S3
			P_S3.Next = oldChild

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *D_S_T1.Value.(*int64) + *P_S3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = D_S_T1
			_ = PLUS2
			_ = P_S3
		case 12:
			ruleType = gopapageno.RuleSimple

			NEW_AXIOM0 := lhs
			P_S1 := rhs[0]

			NEW_AXIOM0.Child = P_S1
			NEW_AXIOM0.LastChild = P_S1

			{
				NEW_AXIOM0.Value = P_S1.Value
			}
			_ = P_S1
		case 13:
			ruleType = gopapageno.RuleAppendRight

			P_S0 := lhs
			P_S1 := rhs[0]
			PLUS2 := rhs[1]
			D_E_P_S_T3 := rhs[2]

			P_S0.LastChild.Next = PLUS2
			PLUS2.Next = D_E_P_S_T3
			P_S0.LastChild = D_E_P_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *P_S1.Value.(*int64) + *D_E_P_S_T3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = P_S1
			_ = PLUS2
			_ = D_E_P_S_T3
		case 14:
			ruleType = gopapageno.RuleAppendRight

			P_S0 := lhs
			P_S1 := rhs[0]
			PLUS2 := rhs[1]
			D_E_P_S_T3 := rhs[2]

			P_S0.LastChild.Next = PLUS2
			PLUS2.Next = D_E_P_S_T3
			P_S0.LastChild = D_E_P_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *P_S1.Value.(*int64) + *D_E_P_S_T3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = P_S1
			_ = PLUS2
			_ = D_E_P_S_T3
		case 15:
			ruleType = gopapageno.RuleAppendRight

			P_S0 := lhs
			P_S1 := rhs[0]
			PLUS2 := rhs[1]
			D_S_T3 := rhs[2]

			P_S0.LastChild.Next = PLUS2
			PLUS2.Next = D_S_T3
			P_S0.LastChild = D_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *P_S1.Value.(*int64) + *D_S_T3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = P_S1
			_ = PLUS2
			_ = D_S_T3
		case 16:
			ruleType = gopapageno.RuleAppendRight

			P_S0 := lhs
			P_S1 := rhs[0]
			PLUS2 := rhs[1]
			D_S_T3 := rhs[2]

			P_S0.LastChild.Next = PLUS2
			PLUS2.Next = D_S_T3
			P_S0.LastChild = D_S_T3

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *P_S1.Value.(*int64) + *D_S_T3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = P_S1
			_ = PLUS2
			_ = D_S_T3
		case 17:
			ruleType = gopapageno.RuleCombine

			P_S0 := lhs
			P_S1 := rhs[0]
			PLUS2 := rhs[1]
			P_S3 := rhs[2]

			P_S0.LastChild.Next = PLUS2
			PLUS2.Next = P_S3.Child
			P_S0.LastChild = P_S3.LastChild

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *P_S1.Value.(*int64) + *P_S3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = P_S1
			_ = PLUS2
			_ = P_S3
		case 18:
			ruleType = gopapageno.RuleCombine

			P_S0 := lhs
			P_S1 := rhs[0]
			PLUS2 := rhs[1]
			P_S3 := rhs[2]

			P_S0.LastChild.Next = PLUS2
			PLUS2.Next = P_S3.Child
			P_S0.LastChild = P_S3.LastChild

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *P_S1.Value.(*int64) + *P_S3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = P_S1
			_ = PLUS2
			_ = P_S3
		case 19:
			ruleType = gopapageno.RuleCombine

			P_S0 := lhs
			P_S1 := rhs[0]
			PLUS2 := rhs[1]
			P_S3 := rhs[2]

			P_S0.LastChild.Next = PLUS2
			PLUS2.Next = P_S3.Child
			P_S0.LastChild = P_S3.LastChild

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *P_S1.Value.(*int64) + *P_S3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = P_S1
			_ = PLUS2
			_ = P_S3
		case 20:
			ruleType = gopapageno.RuleCombine

			P_S0 := lhs
			P_S1 := rhs[0]
			PLUS2 := rhs[1]
			P_S3 := rhs[2]

			P_S0.LastChild.Next = PLUS2
			PLUS2.Next = P_S3.Child
			P_S0.LastChild = P_S3.LastChild

			{
				newValue := parserInt64Pools[thread].Get()
				*newValue = *P_S1.Value.(*int64) + *P_S3.Value.(*int64)
				P_S0.Value = newValue
			}
			_ = P_S1
			_ = PLUS2
			_ = P_S3
		case 21:
			ruleType = gopapageno.RuleSimple

			D_E_P_S_T0 := lhs
			LPAR1 := rhs[0]
			D_E_P_S_T2 := rhs[1]
			RPAR3 := rhs[2]

			D_E_P_S_T0.Child = LPAR1
			LPAR1.Next = D_E_P_S_T2
			D_E_P_S_T2.Next = RPAR3
			D_E_P_S_T0.LastChild = RPAR3

			{
				D_E_P_S_T0.Value = D_E_P_S_T2.Value
			}
			_ = LPAR1
			_ = D_E_P_S_T2
			_ = RPAR3
		case 22:
			ruleType = gopapageno.RuleSimple

			D_E_P_S_T0 := lhs
			LPAR1 := rhs[0]
			D_S_T2 := rhs[1]
			RPAR3 := rhs[2]

			D_E_P_S_T0.Child = LPAR1
			LPAR1.Next = D_S_T2
			D_S_T2.Next = RPAR3
			D_E_P_S_T0.LastChild = RPAR3

			{
				D_E_P_S_T0.Value = D_S_T2.Value
			}
			_ = LPAR1
			_ = D_S_T2
			_ = RPAR3
		case 23:
			ruleType = gopapageno.RuleSimple

			D_E_P_S_T0 := lhs
			LPAR1 := rhs[0]
			P_S2 := rhs[1]
			RPAR3 := rhs[2]

			D_E_P_S_T0.Child = LPAR1
			LPAR1.Next = P_S2
			P_S2.Next = RPAR3
			D_E_P_S_T0.LastChild = RPAR3

			{
				D_E_P_S_T0.Value = P_S2.Value
			}
			_ = LPAR1
			_ = P_S2
			_ = RPAR3
		case 24:
			ruleType = gopapageno.RuleSimple

			D_E_P_S_T0 := lhs
			LPAR1 := rhs[0]
			S2 := rhs[1]
			RPAR3 := rhs[2]

			D_E_P_S_T0.Child = LPAR1
			LPAR1.Next = S2
			S2.Next = RPAR3
			D_E_P_S_T0.LastChild = RPAR3

			{
				D_E_P_S_T0.Value = S2.Value
			}
			_ = LPAR1
			_ = S2
			_ = RPAR3
		case 25:
			ruleType = gopapageno.RuleSimple

			D_E_P_S_T0 := lhs
			NUMBER1 := rhs[0]

			D_E_P_S_T0.Child = NUMBER1
			D_E_P_S_T0.LastChild = NUMBER1

			{
				D_E_P_S_T0.Value = NUMBER1.Value
			}
			_ = NUMBER1
		case 26:
			ruleType = gopapageno.RuleSimple

			NEW_AXIOM0 := lhs
			S1 := rhs[0]

			NEW_AXIOM0.Child = S1
			NEW_AXIOM0.LastChild = S1

			{
				NEW_AXIOM0.Value = S1.Value
			}
			_ = S1
		}
		_ = ruleType
	}

	return gopapageno.NewParser(
		NewLexer(),
		numTerminals,
		numNonTerminals,
		maxRHSLen,
		rules,
		compressedRules,
		precMatrix,
		bitPackedMatrix,
		fn,
		gopapageno.COPP,
		opts...)
}
