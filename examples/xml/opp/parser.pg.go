// Code generated by Gopapageno; DO NOT EDIT.
package main

import (
	"github.com/giornetta/gopapageno"
	"strings"
	"fmt"
)


// Non-terminals
const (
	ELEM = gopapageno.TokenEmpty + 1 + iota
)

// Terminals
const (
	AlternativeClose = gopapageno.TokenTerm + 1 + iota
	CloseBracket
	CloseParams
	Infos
	OpenBracket
	OpenCloseInfo
	OpenCloseParams
	OpenParams
)

func SprintToken[ValueType any](root *gopapageno.Token) string {
	var sprintRec func(t *gopapageno.Token, sb *strings.Builder, indent string)

	sprintRec = func(t *gopapageno.Token, sb *strings.Builder, indent string) {
		if t == nil {
			return
		}

		sb.WriteString(indent)
		if t.Next == nil {
			sb.WriteString("└── ")
			indent += "    "
		} else {
			sb.WriteString("├── ")
			indent += "|   "
		}

		switch t.Type {
		case ELEM:
			sb.WriteString("ELEM")
		case gopapageno.TokenEmpty:
			sb.WriteString("Empty")
		case AlternativeClose:
			sb.WriteString("AlternativeClose")
		case CloseBracket:
			sb.WriteString("CloseBracket")
		case CloseParams:
			sb.WriteString("CloseParams")
		case Infos:
			sb.WriteString("Infos")
		case OpenBracket:
			sb.WriteString("OpenBracket")
		case OpenCloseInfo:
			sb.WriteString("OpenCloseInfo")
		case OpenCloseParams:
			sb.WriteString("OpenCloseParams")
		case OpenParams:
			sb.WriteString("OpenParams")
		case gopapageno.TokenTerm:
			sb.WriteString("Term")
		default:
			sb.WriteString("Unknown")
		}

		if t.Value != nil {
			if v, ok := any(t.Value).(*ValueType); ok {
				sb.WriteString(fmt.Sprintf(": %v", *v))
			}
		}
		
		sb.WriteString("\n")
		
		sprintRec(t.Child, sb, indent)
		sprintRec(t.Next, sb, indent[:len(indent)-4])
	}

	var sb strings.Builder
	
	sprintRec(root, &sb, "")
	
	return sb.String()
}

func NewGrammar() *gopapageno.Grammar {
	numTerminals := uint16(9)
	numNonTerminals := uint16(2)

	maxRHSLen := 3
	rules := []gopapageno.Rule{
		{ELEM, []gopapageno.TokenType{AlternativeClose}, gopapageno.RuleSimple},
		{ELEM, []gopapageno.TokenType{Infos}, gopapageno.RuleSimple},
		{ELEM, []gopapageno.TokenType{OpenBracket, ELEM, CloseBracket}, gopapageno.RuleSimple},
		{ELEM, []gopapageno.TokenType{OpenCloseInfo}, gopapageno.RuleSimple},
		{ELEM, []gopapageno.TokenType{OpenCloseParams}, gopapageno.RuleSimple},
		{ELEM, []gopapageno.TokenType{OpenParams, ELEM, CloseBracket}, gopapageno.RuleSimple},
	}
	compressedRules := []uint16{0, 0, 6, 32769, 15, 32772, 18, 32773, 21, 32774, 34, 32775, 37, 32776, 40, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 26, 0, 0, 1, 32770, 31, 1, 2, 0, 1, 3, 0, 1, 4, 0, 0, 0, 1, 1, 45, 0, 0, 1, 32770, 50, 1, 5, 0	}

	precMatrix := [][]gopapageno.Precedence{
		{gopapageno.PrecEquals, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecEquals, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecEquals, gopapageno.PrecEquals, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields},
	}
	bitPackedMatrix := []uint64{
		3074422161111864660, 12288816313876916906, 5721467434, 
	}

	fn := func(ruleDescription uint16, ruleFlags gopapageno.RuleFlags, lhs *gopapageno.Token, rhs []*gopapageno.Token, thread int){
		switch ruleDescription {
		case 0:
			ELEM0 := lhs
			AlternativeClose1 := rhs[0]

			ELEM0.Child = AlternativeClose1
			ELEM0.LastChild = AlternativeClose1

			{
			}
			_ = AlternativeClose1
		case 1:
			ELEM0 := lhs
			Infos1 := rhs[0]

			ELEM0.Child = Infos1
			ELEM0.LastChild = Infos1

			{
			}
			_ = Infos1
		case 2:
			ELEM0 := lhs
			OpenBracket1 := rhs[0]
			ELEM2 := rhs[1]
			CloseBracket3 := rhs[2]

			ELEM0.Child = OpenBracket1
			OpenBracket1.Next = ELEM2
			ELEM2.Next = CloseBracket3
			ELEM0.LastChild = CloseBracket3

			{
			}
			_ = OpenBracket1
			_ = ELEM2
			_ = CloseBracket3
		case 3:
			ELEM0 := lhs
			OpenCloseInfo1 := rhs[0]

			ELEM0.Child = OpenCloseInfo1
			ELEM0.LastChild = OpenCloseInfo1

			{
			}
			_ = OpenCloseInfo1
		case 4:
			ELEM0 := lhs
			OpenCloseParams1 := rhs[0]

			ELEM0.Child = OpenCloseParams1
			ELEM0.LastChild = OpenCloseParams1

			{
			}
			_ = OpenCloseParams1
		case 5:
			ELEM0 := lhs
			OpenParams1 := rhs[0]
			ELEM2 := rhs[1]
			CloseBracket3 := rhs[2]

			ELEM0.Child = OpenParams1
			OpenParams1.Next = ELEM2
			ELEM2.Next = CloseBracket3
			ELEM0.LastChild = CloseBracket3

			{
			}
			_ = OpenParams1
			_ = ELEM2
			_ = CloseBracket3
		}
		_ = ruleFlags
	}

	return &gopapageno.Grammar{
		NumTerminals:  numTerminals,
		NumNonterminals: numNonTerminals,
		MaxRHSLength: maxRHSLen,
		Rules: rules,
		CompressedRules: compressedRules,
		PrecedenceMatrix: precMatrix,
		BitPackedPrecedenceMatrix: bitPackedMatrix,
		Func: fn,
		ParsingStrategy: gopapageno.OPP,
	}
}

